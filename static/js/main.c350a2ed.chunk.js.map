{"version":3,"sources":["components/Recipes.tsx","components/Home.tsx","components/PublicTransport.tsx","components/Theme.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","card","height","mockData","name","description","ingredients","amount","instruction","Recipes","classes","Container","Typography","variant","Grid","container","spacing","map","recipe","item","xs","sm","md","lg","Card","className","CardHeader","title","subheader","CardContent","color","component","ingredient","Home","PublicTransport","theme","createMuiTheme","palette","type","ThemeWrapper","children","ThemeProvider","App","Theme","to","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c350a2ed.chunk.js","sourcesContent":["import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  card: {\n    height: '250px',\n  },\n});\n\nconst mockData = [\n  {\n    name: 'Goulash stew',\n    description: 'Delicious stew made out of bell peppers and potatoes',\n    ingredients: [{ name: 'bell pepper', amount: '1 pcs' }, { name: 'potato', amount: '7 - 10 pcs' }],\n    instruction: 'Put stuff in a pot. Put pot in the oven and wait',\n  },\n  {\n    name: 'Hamburger1',\n    description: 'The best hamburger in the world',\n    ingredients: [{ name: 'bun', amount: '1 pcs' }, { name: 'ground beef patty', amount: '2 pcs' }],\n    instruction: 'Split the bun, put beef pattys in the middle. Enjoy!',\n  },\n  {\n    name: 'Hamburger2',\n    description: 'The best hamburger in the world',\n    ingredients: [{ name: 'bun', amount: '1 pcs' }, { name: 'ground beef patty', amount: '2 pcs' }],\n    instruction: 'Split the bun, put beef pattys in the middle. Enjoy!',\n  },\n  {\n    name: 'Hamburger3',\n    description: 'The best hamburger in the world',\n    ingredients: [{ name: 'bun', amount: '1 pcs' }, { name: 'ground beef patty', amount: '2 pcs' }],\n    instruction: 'Split the bun, put beef pattys in the middle. Enjoy!',\n  },\n  {\n    name: 'Hamburger4',\n    description: 'The best hamburger in the world',\n    ingredients: [{ name: 'bun', amount: '1 pcs' }, { name: 'ground beef patty', amount: '2 pcs' }],\n    instruction: 'Split the bun, put beef pattys in the middle. Enjoy!',\n  },\n  {\n    name: 'Hamburger5',\n    description: 'The best hamburger in the world',\n    ingredients: [{ name: 'bun', amount: '1 pcs' }, { name: 'ground beef patty', amount: '2 pcs' }],\n    instruction: 'Split the bun, put beef pattys in the middle. Enjoy!',\n  },\n  {\n    name: 'Hamburger6',\n    description: 'The best hamburger in the world',\n    ingredients: [{ name: 'bun', amount: '1 pcs' }, { name: 'ground beef patty', amount: '2 pcs' }],\n    instruction: 'Split the bun, put beef pattys in the middle. Enjoy!',\n  },\n];\n\nconst Recipes = () => {\n  const classes = useStyles();\n\n  return (\n    <Container>\n      <Typography variant=\"h1\">Reseptit</Typography>\n      <Typography variant=\"body1\">\n        Rutkasti herkullisia reseptejä, uudessa ulkoasussa!\n      </Typography>\n      <Grid container spacing={1}>\n        {mockData.map((recipe) => (\n          <Grid item xs={12} sm={6} md={4} lg={3}>\n            <Card key={recipe.name} className={classes.card}>\n              <CardHeader\n                title={recipe.name}\n                subheader={recipe.description}\n              />\n              <CardContent>\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                  {recipe.ingredients.map((ingredient) => (\n                    <>\n                      <span>\n                        {ingredient.name}\n                        {' '}\n                        :\n                        {' '}\n                        {ingredient.amount}\n                      </span>\n                      <br />\n\n                    </>\n                  ))}\n                  {recipe.instruction}\n                </Typography>\n              </CardContent>\n\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default Recipes;\n","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nconst Home = () => {\r\n\r\n  return (\r\n    <Container>\r\n      <Typography variant=\"h1\">Kotiverkko 2.0</Typography>\r\n      <Typography variant=\"body1\">\r\n        Kaikki palvelut, joita kotona voi tarvita! Typescriptillä!\r\n      </Typography>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nconst PublicTransport = () => {\r\n\r\n  return (\r\n    <Container>\r\n      <Typography variant=\"h1\">Julkisen liikenteen yhteydet</Typography>\r\n      <Typography variant=\"body1\">\r\n        Täältä näkee mikä bussi tai juna on lähdössä! T.Dösäkuski\r\n      </Typography>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PublicTransport;\r\n","import React from 'react';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\ninterface ThemeWrapperProps {\n  children: any;\n}\n\nconst ThemeWrapper = ({ children }: ThemeWrapperProps) => (\n  <ThemeProvider theme={theme}>\n    {children}\n  </ThemeProvider>\n);\n\nexport default ThemeWrapper;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n} from 'react-router-dom';\nimport Recipes from './components/Recipes';\nimport Home from './components/Home';\nimport PublicTransport from './components/PublicTransport';\nimport ThemeWrapper from './components/Theme';\n\n// tälle sivulle linkit joukkoliikenne-sivulle ja reseptisivuille ja vanhaan reseptiwikiin\n// single-page application? mitenkäs se pitikään mennä? :D\n// js vai typescript?\n// prettieriin linttaus save\n\nconst App = () => (\n  <ThemeWrapper>\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/reseptit\">Reseptit</Link>\n          </li>\n          <li>\n            <Link to=\"/joukkoliikenne\">Joukkoliikenne</Link>\n          </li>\n        </ul>\n\n        <hr />\n\n        {/*\n          A <Switch> looks through all its children <Route>\n          elements and renders the first one whose path\n          matches the current URL. Use a <Switch> any time\n          you have multiple routes, but you want only one\n          of them to render at a time\n        */}\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/reseptit\">\n            <Recipes />\n          </Route>\n          <Route path=\"/joukkoliikenne\">\n            <PublicTransport />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  </ThemeWrapper>\n);\n\n// You can think of these components as \"pages\"\n// in your app.\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}